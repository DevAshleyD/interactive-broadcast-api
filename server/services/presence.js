/** Imports */
import config from '../../config/config';
import { getEventByKey, getEventBySessionId } from './event';
import { getAdmin } from './admin';

/** Constants */
const interactiveStreamLimit = config.interactiveStreamLimit;

/** Local Storage */

/**
 * Number of users (fans) connected to interactive sessions
 * { connectionId => count }
 * For interactive sessions, the connectionId is the host session id.
 * */

const activeConnections = new Map();

/** { hostSessionId => data }  */
const sessionData = new Map();

/** { hostSessionId => fanUrl }  */
const EventKeysBySessionId = new Map();


/** Internal Methods */

/**
 * Update active connections to interactive session
 * @param {Map} connections {id => connection}
 */
const updateEmptySessions = (connections) => {
  activeConnections.forEach((count, connectionId) => {
    if (!connections.has(connectionId)) {
      activeConnections.set(connectionId, 0);
    }
  });
};

/**
 * Returns the host session id associated with a fan url
 * @param {String} fanUrl
 * @param {String} adminId
 * @returns {String}
 */
const getInteractiveSession = async (fanUrl, adminId) => {
  const eventKey = [fanUrl, adminId].join('-');
  if (sessionData.has(eventKey)) {
    return sessionData.get(eventKey);
  }

  const event = await getEventByKey(adminId, fanUrl, 'fanUrl');
  const admin = await getAdmin(event.adminId);
  const data = {
    sessionId: event.sessionId,
    eventName: event.name,
    eventImage: event.startImage,
    apiKey: admin.otApiKey,
    apiSecret: admin.otSecret,
    hls: admin.hls
  };
  sessionData.set(eventKey, data);
  EventKeysBySessionId.set(event.sessionId, eventKey);
  return data;
};

/** Exports */

/** How many fans are connected to the session */
const getActiveCount = sessionId => activeConnections.get(sessionId) || 0;

const getActiveConnections = () => activeConnections;

/**
 * Returns the session Data associated with a session Id
 * @param {String} sessionId
 * @returns {String}
 */
const getInteractiveSessionData = async (sessionId) => {
  if (EventKeysBySessionId.has(sessionId)) {
    const eventKey = EventKeysBySessionId.get(sessionId);
    return sessionData.get(eventKey);
  }
  const event = await getEventBySessionId(sessionId);
  const admin = await getAdmin(event.adminId);
  const eventKey = [event.fanUrl, event.adminId].join('-');
  const data = {
    sessionId: event.sessionId,
    eventName: event.name,
    eventImage: event.startImage,
    apiKey: admin.otApiKey,
    apiSecret: admin.otSecret,
    rtmpUrl: event.rtmpUrl,
    hls: admin.hls
  };
  sessionData.set(eventKey, data);
  EventKeysBySessionId.set(sessionId, eventKey);
  return data;
};

/**
 *
 * @param {String} sessionId - The room
 * @returns {Boolean}
 */
const ableToJoinInteractiveBySession = sessionId => getActiveCount(sessionId) < interactiveStreamLimit;

/**
 *
 * @param {String} fanUrl - The url for the show the fan is trying to join
 * @param {String} adminId - The adminId
 * @param {String} [token] - The token generated by 'moveUsersToInteractive' which ensures access to the interactive session
 * @returns {Promise} <Resolve => {Boolean}, Reject => {Error}>
 */
const ableToJoinInteractive = async (fanUrl, adminId) => {
  const { sessionId, eventImage, eventName } = await getInteractiveSession(fanUrl, adminId);
  const ableToJoin = ableToJoinInteractiveBySession(sessionId);
  return {
    ableToJoin,
    sessionId,
    eventImage,
    eventName
  };
};

/**
 * Update active connections to interactive session
 * @param {Map} connections {id => connection}
 */
const updateConnections = (connections) => {
  /**
   * Socket.io automatically deletes rooms without any active connections,
   * meaning we won't receieve any data for those rooms (i.e. sessions). So
   * we need to maually set those counts to 0.
   * */
  updateEmptySessions(connections);

  connections.forEach((connection) => {
    // Update connection count
    activeConnections.set(connection.id, connection.connections);
  });
};

/**
 * Clean up local storage
 * @param {String} sessionId - The broadcast session id
 */
const removeLocalStorage = (sessionId) => {
  const eventKey = EventKeysBySessionId.get(sessionId);
  // Remove sessionData
  sessionData.delete(eventKey);
  EventKeysBySessionId.delete(sessionId);
  activeConnections.interactive.delete(sessionId);
};

const setSessionData = (data) => {
  if (!sessionData.has(data.eventKey)) {
    sessionData.set(data.eventKey, data);
    EventKeysBySessionId.set(data.sessionId, data.eventKey);
  }
  return sessionData.get(data.eventKey);
};

export default {
  setSessionData,
  ableToJoinInteractiveBySession,
  getActiveCount,
  ableToJoinInteractive,
  updateConnections,
  removeLocalStorage,
  getActiveConnections,
  getInteractiveSessionData
};
